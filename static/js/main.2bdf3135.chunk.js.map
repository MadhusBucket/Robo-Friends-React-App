{"version":3,"sources":["components/Scrolls.js","components/Card.js","components/CardList.js","components/Searchbox.js","containers/App.js","errorboundry.js","serviceWorker.js","index.js"],"names":["Scrolls","props","style","overflowY","border","children","Card","name","email","id","className","src","alt","CardList","robots","map","user","i","key","Searchbox","searchfield","searchChange","type","placeholder","onChange","App","Component","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","robot","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"2MAYeA,EATC,SAACC,GACb,OACI,yBAAKC,MAAO,CAACC,UAAW,SAASC,OAAO,oBACnCH,EAAMI,WCYJC,G,KAbF,SAACL,GAAW,IACdM,EAAmBN,EAAnBM,KAAMC,EAAaP,EAAbO,MAAOC,EAAMR,EAANQ,GACpB,OACE,yBAAKC,UAAU,uDACb,yBAAKC,IAAG,+BAA0BF,EAA1B,YAAwCG,IAAI,UACpD,6BACE,4BAAKL,GACL,2BAAIC,OCSCK,EAlBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEhB,OACG,6BAEKA,EAAOC,KAAI,SAACC,EAAMC,GACd,OAAS,kBAAC,EAAD,CACFC,IAAOD,EACPR,GAAKK,EAAOG,GAAGR,GACfF,KAAQO,EAAOG,GAAGV,KAClBC,MAASM,EAAOG,GAAGT,aCI3BW,EAbG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAChC,OACE,yBAAKX,UAAU,WACb,2BACEA,UAAU,4CACVY,KAAK,SACLC,YAAY,sBACZC,SAAUH,MC0CHI,GCnDYC,Y,kDDWvB,aAAc,IAAD,8BACT,gBAaJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAACT,YAAcQ,EAAME,OAAOC,SAb1C,EAAKC,MAAQ,CACTlB,OAAQ,GACRM,YAAa,IAJR,E,gEAQO,IAAD,OACfa,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKR,SAAS,CAACf,OAASuB,S,+BAUrC,IAAD,OACCC,EAAiBC,KAAKP,MAAMlB,OAAO0B,QAAO,SAACC,GAC7C,OAAOA,EAAMlC,KAAKmC,cAAcC,SAAS,EAAKX,MAAMZ,YAAYsB,kBAEnE,OACE,yBAAKhC,UAAU,MACb,wBAAIA,UAAU,MAAd,uBACA,kBAAC,EAAD,CAAWW,aAAckB,KAAKZ,iBAC9B,kBAAC,EAAD,KACE,sCACE,kBAAC,EAAD,CAAUb,OAAQwB,W,GAjCjBZ,cECEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAAOC,SAASC,eAAe,SD4HzC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.2bdf3135.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Scrolls = (props) => {\r\n    return(\r\n        <div style={{overflowY: 'scroll',border:'1px solid white',}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Scrolls;\r\n","import React from 'react';\r\nimport 'tachyons';\r\n\r\n\r\n\r\nconst Card = (props) => {\r\n    const {name, email, id} = props;\r\n    return (\r\n      <div className='bg-light-green dib br4 pa3 ma3 grow bw3 shadow-4 tc'>\r\n        <img src={`https://robohash.org/${id}?150*150`} alt=\"RObOt\" />\r\n        <div>\r\n          <h2>{name}</h2>\r\n          <p>{email}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n  \r\n    return(\r\n       <div>\r\n        {\r\n            robots.map((user, i) => {\r\n                return ( <Card\r\n                       key = {i}\r\n                       id ={robots[i].id}\r\n                       name = {robots[i].name}\r\n                       email = {robots[i].email} />);\r\n                         })\r\n        }\r\n       </div>\r\n    );\r\n}\r\n\r\n\r\nexport default CardList;","import React from 'react';\r\nimport 'tachyons';\r\n\r\n\r\nconst Searchbox = ({ searchfield, searchChange }) => {\r\n  return (\r\n    <div className=\"pa2 ma2\">\r\n      <input\r\n        className=\"wa-5 pa3 ma2 ba b--green bg-lightest-blue\"\r\n        type=\"search\"\r\n        placeholder=\"Search for Unknown \"\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Searchbox;","import React,{ Component } from 'react';\r\nimport Scrolls from '../components/Scrolls';\r\nimport CardList from '../components/CardList';\r\nimport Searchbox from '../components/Searchbox';\r\nimport errorBoundry from '../errorboundry';\r\nimport 'tachyons';\r\n\r\n\r\n\r\n\r\n\r\nclass App extends Component  {\r\n\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: \"\",\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json())\r\n            .then(users => this.setState({robots : users}))\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({searchfield : event.target.value})\r\n        \r\n       \r\n        \r\n    }\r\n\r\n    render() {\r\n        const filteredRobots = this.state.robots.filter((robot) => {\r\n            return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n        })\r\n         return (\r\n           <div className=\"tc\">\r\n             <h1 className=\"f1\">I DONT'T KNOW STUFF</h1>\r\n             <Searchbox searchChange={this.onSearchChange} />\r\n             <Scrolls>\r\n               <errorBoundry>\r\n                 <CardList robots={filteredRobots} />\r\n               </errorBoundry>\r\n             </Scrolls>\r\n           </div>\r\n         );\r\n    }\r\n   \r\n}\r\n\r\nexport default App;","import React, { Component } from \"react\";\r\n\r\nclass ErrorBoundry extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError : false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error , info){\r\n        this.setState({hasError : true})\r\n    }\r\n\r\n    render(){\r\n        if(this.state.hasError){\r\n            return <h1>Opps that is an error</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\n\r\nexport default ErrorBoundry;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App/>,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}